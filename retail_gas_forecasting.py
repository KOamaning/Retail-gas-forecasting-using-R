# -*- coding: utf-8 -*-
"""retail_gas_forecasting.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vPvanRac_cZ-jQvteYv6UlyRlPN5GabT
"""

library(fpp)

data(fancy)

# 1. Time plot
plot(fancy, main="Monthly Sales at Queensland Gift Shop",
     xlab="Year", ylab="Sales")

# Create a data frame for analysis
fancy_df <- data.frame(
  sales = as.numeric(fancy),
  time = as.numeric(time(fancy)),
  month = factor(cycle(fancy))
)

# Add surfing festival dummy (March 1988 onwards)
fancy_df$surfing <- ifelse(fancy_df$month == 3 &
                          fancy_df$time >= 1988, 1, 0)

# 2. Log transform
fancy_df$log_sales <- log(fancy_df$sales)

# 3. Fit the regression model
model <- lm(log_sales ~ time + month + surfing, data = fancy_df)
summary(model)

# 4. Diagnostic plots
par(mfrow = c(2,1))
# Residuals vs Time
plot(fancy_df$time, residuals(model),
     main="Residuals vs Time",
     xlab="Time", ylab="Residuals")
abline(h=0, lty=2)

# Residuals vs Fitted
plot(fitted(model), residuals(model),
     main="Residuals vs Fitted Values",
     xlab="Fitted Values", ylab="Residuals")
abline(h=0, lty=2)

# 5. Monthly boxplots of residuals
par(mfrow = c(1,1))
boxplot(residuals(model) ~ fancy_df$month,
        main="Monthly Distribution of Residuals",
        xlab="Month", ylab="Residuals")

# 7. Breusch-Godfrey test
bg <- bgtest(model)
print(bg)

# 8 & 9. Predictions for 1994-1996
# Create new data for predictions
new_times <- seq(1994, 1996, length=36)
new_months <- factor(rep(1:12, 3))
new_surfing <- ifelse(new_months == 3, 1, 0)

new_data <- data.frame(
  time = new_times,
  month = new_months,
  surfing = new_surfing
)

# Generate predictions on log scale
predictions <- predict(model, new_data, interval="prediction")

# Transform back to original scale
raw_predictions <- exp(predictions)

# Plot original data with predictions
plot(fancy, xlim=c(1987, 1996), ylim=c(min(fancy), max(raw_predictions)),
     main="Sales with Predictions", xlab="Year", ylab="Sales")
lines(new_times, raw_predictions[,"fit"], col="blue")
lines(new_times, raw_predictions[,"lwr"], col="red", lty=2)
lines(new_times, raw_predictions[,"upr"], col="red", lty=2)
legend("topleft", legend=c("Actual", "Prediction", "Prediction Interval"),
       col=c("black", "blue", "red"), lty=c(1,1,2))

# Display the first few predictions
head(raw_predictions)

install.packages("fpp")
install.packages("fpp2")

# Load required packages
library(fpp2)
library(forecast)
library(ggplot2)

# Load and prepare data
data(gasoline)
gas <- window(gasoline, end=c(2004,52))

# 1. Fit models with different K values
# K=3
K <- 3
fit1 <- tslm(gas ~ trend + fourier(gas, K))
plot(gas, main=paste("Harmonic Regression with K =", K),
     ylab="Million barrels per day", xlab="Year")
lines(fitted(fit1), col="red")

# K=5
K <- 5
fit2 <- tslm(gas ~ trend + fourier(gas, K))
plot(gas, main=paste("Harmonic Regression with K =", K),
     ylab="Million barrels per day", xlab="Year")
lines(fitted(fit2), col="red")

# K=7
K <- 7
fit3 <- tslm(gas ~ trend + fourier(gas, K))
plot(gas, main=paste("Harmonic Regression with K =", K),
     ylab="Million barrels per day", xlab="Year")
lines(fitted(fit3), col="red")

# 2. Compare AIC values
aic_values <- c(AIC(fit1), AIC(fit2), AIC(fit3))
k_values <- c(3, 5, 7)
aic_df <- data.frame(K = k_values, AIC = aic_values)
print("AIC values for different K:")
print(aic_df)
best_K <- k_values[which.min(aic_values)]
print(paste("Best K based on AIC:", best_K))

# Use the best K for final model
final_fit <- tslm(gas ~ trend + fourier(gas, best_K))

# 3. Check residuals
checkresiduals(final_fit)

# 4 & 5. Generate and plot forecasts
h <- 52  # forecast horizon (one year)
# Create future fourier terms
future_fourier <- fourier(gas, K=best_K, h=h)
# Generate forecasts
fc <- forecast(final_fit, newdata=data.frame(future_fourier))

# Get actual 2005 data for comparison
gas_2005 <- window(gasoline, start=c(2005,1), end=c(2005,52))

# Plot forecasts and actual values
plot(fc, main="Gasoline Forecasts for 2005",
     ylab="Million barrels per day")
lines(gas_2005, col="red")
legend("topleft", legend=c("Forecast", "Actual"),
       col=c("blue", "red"), lty=1)

# Print forecast accuracy
print("Forecast accuracy metrics:")
accuracy_metrics <- accuracy(fc, gas_2005)
print(accuracy_metrics)

install.packages("AICcmodavg")

install.packages(c("fpp2", "forecast", "ggplot2"))